# vim: set ft=ansible:
---
- name: Create the bastion host
  hosts: localhost
  gather_facts: no
  connection: local
  become: False
  vars:
    debug_print: true
    cluster_id: "{{ lookup('env','os_cluster_id') }}"
    ec2_region: "{{ lookup('env','ec2_region') }}"
    os_cluster_id: "{{ lookup('env','os_cluster_id') }}"
    ec2_public_az: "{{ lookup('env','ec2_public_az') }}"
    ec2_private_1a_az: "{{ lookup('env','ec2_private_1a_az') }}"
    ec2_private_1e_az: "{{ lookup('env','ec2_private_1e_az') }}"

  tasks:
  - name: Create bastion security group
    ec2_group:
      name: "{{ cluster_id }}-bastion"
      description: "{{ cluster_id }} bastion security group"
      region: "{{ ec2_region }}"
      vpc_id: "{{ public_vpc.vpc_id }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 5902
          to_port: 5902
          cidr_ip: 0.0.0.0/0
        - proto: all
          from_port: -1
          to_port: -1
          group_id: 10.0.0.0/16
        - proto: all
          from_port: -1
          to_port: -1
          group_id: 192.168.0.0/16
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: security_group

  - name: Debug security group data structure
    debug: var=security_group
    when: debug_print == true

  - name: Create ec2 bastion host instance
    ec2:
      image: "{{ ec2_image }}"
      region: "{{ ec2_region }}"
      key_name: "{{ ec2_keypair }}"
      instance_type: "{{ ec2_instance_type }}"
      group_id: "{{ security_group.group_id }}"
      instance_tags:
        Name: "{{ cluster_id }}"
        instance_role: "bastion"
      exact_count: "1"
      count_tag:
        Name: "{{ cluster_id }}"
        instance_role: "bastion"
      wait: yes
      volumes:
        - volume_size: 10
          device_type: gp2
          device_name: /dev/sda1
          delete_on_termination: True
        - device_name: /dev/xvdb
          device_type: gp2
          volume_size: 300
          delete_on_termination: True
      assign_public_ip: yes
      vpc_subnet_id: "{{ public_vpc.subnets.0.id }}"
    register: ec2

  - name: Debug ec2 data structure
    debug: var=ec2
    when: debug_print == true

  - name: Add hosts to ec2 group
    add_host: name={{ item.public_dns_name }} groups=ec2
    with_items:
      - "{{ ec2.results.0.instances }}"
      - "{{ ec2.results.1.instances }}"

  - name: debug groups variable
    debug: var=groups
    when: debug_print == true

  - name: Wait for SSH to come up
    wait_for: host={{ item }} port=22 delay=0 timeout=600 state=started
    with_items:
      - "{{ groups.ec2 }}"

  - name: Wait for successful SSH
    command: "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null ec2-user@{{ item }} echo host is up"
    register: result
    until: result.rc == 0
    retries: 60
    delay: 10
    with_items: "{{ groups.ec2 }}"

  - name: Copy partition script
    copy:
      src: ./partition.sh
      dest: /tmp/partition.sh
      owner: root
      mode: 0700

  - name: Execute the partition script
    shell: /tmp/partition.sh

  - name: Format EBS volume
    filesystem:
      fstype: xfs
      dev: /dev/xvdb1

  - name: Make the yum html directory
    file:
      path: "/var/www/html"
      state: directory
      mode: 0755
      recurse: yes

  - name: Mount the volume
    mount:
      name: "/var/www/html"
      src: /dev/xvdb1
      fstype: xfs
      state: mounted
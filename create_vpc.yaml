# vim: set ft=ansible:
---
- name: Configure the VPC
  hosts: localhost
  gather_facts: no
  connection: local
  become: False
  vars:
    debug_print: true
    cluster_id: "{{ lookup('env','os_cluster_id') }}"
    ec2_region: "{{ lookup('env','ec2_region') }}"
    os_cluster_id: "{{ lookup('env','os_cluster_id') }}"
    ec2_public_az: "{{ lookup('env','ec2_public_az') }}"
    ec2_private_1a_az: "{{ lookup('env','ec2_private_1a_az') }}"
    ec2_private_1e_az: "{{ lookup('env','ec2_private_1e_az') }}"

  tasks:
  - name: Create ec2 private vpc
    ec2_vpc:
      state: present
      dns_support: yes
      dns_hostnames: yes
      cidr_block: 10.0.0.0/16
      resource_tags:
        env: "{{ cluster_id }}"
        Name: "{{ cluster_id }}-private"
      region: "{{ ec2_region }}"
      subnets:
      - cidr: 10.0.1.0/24
        az: "{{ ec2_private_1a_az }}"
        resource_tags:
          env: "{{ cluster_id }}"
          Name: "{{ cluster_id }}-private-1a"
      - cidr: 10.0.2.0/24
        az: "{{ ec2_private_1e_az }}"
        resource_tags:
          env: "{{ cluster_id }}"
          Name: "{{ cluster_id }}-private-1e"
      internet_gateway: no
      wait: yes
    register: private_vpc

  - name: Debug private vpc data structure
    debug: var=private_vpc
    when: debug_print == true

  - name: Create ec2 public vpc
    ec2_vpc:
      state: present
      dns_support: yes
      dns_hostnames: yes
      cidr_block: 192.168.0.0/16
      resource_tags:
        env: "{{ cluster_id }}"
        Name: "{{ cluster_id }}-public"
      region: "{{ ec2_region }}"
      subnets:
      - cidr: 192.168.1.0/24
        az: "{{ ec2_public_az }}"
        resource_tags:
          env: "{{ cluster_id }}"
          Name: "{{ cluster_id }}-public-1a"
      internet_gateway: yes
      route_tables:
      - subnets:
        - 192.168.1.0/24
        routes:
        - dest: 0.0.0.0/0
          gw: igw
        resource_tags:
          Name: "{{ cluster_id }}-public"
          env: "{{ cluster_id }}"
      wait: yes
    register: public_vpc

  - name: Debug public vpc data structure
    debug: var=public_vpc
    when: debug_print == true

  - name: Create VPC peering Connection
    ec2_vpc_peer:
      region: "{{ ec2_region }}"
      vpc_id: "{{ public_vpc.vpc_id }}"
      peer_vpc_id: "{{ private_vpc.vpc_id }}"
      state: present
      tags:
        Name: "{{ cluster_id }}-public-private-conn"
        env: "{{ cluster_id }}"
    register: vpc_peer

  - name: Debug vpc peer structure
    debug: var=vpc_peer
    when: debug_print == true

  - name: Accept VPC peering request
    ec2_vpc_peer:
      region: "{{ ec2_region }}"
      peering_id: "{{ vpc_peer.peering_id }}"
      state: accept
      tags:
        Name: "{{ cluster_id }}-public-private-req"
        env: "{{ cluster_id }}"
    register: action_peer

  - name: Debug peering action structure
    debug: var=action_peer
    when: debug_print == true

  - name: Set up private subnet route tables
    ec2_vpc_route_table:
      vpc_id: "{{ private_vpc.vpc_id }}"
      region: "{{ ec2_region }}"
      tags:
        Name: private
        env: "{{ cluster_id }}"
      subnets:
        - "{{ private_vpc.subnets.0.id }}"
        - "{{ private_vpc.subnets.1.id }}"
      routes:
        - dest: 192.168.0.0/16
          vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
    register: private_route_table

  - name: Debug private subnet route structure
    debug: var=private_route_table
    when: debug_print == true

  - name: Set up public subnet route tables
    ec2_vpc_route_table:
      vpc_id: "{{ public_vpc.vpc_id }}"
      region: "{{ ec2_region }}"
      tags:
        Name: public
        env: "{{ cluster_id }}"
      subnets:
        - "{{ public_vpc.subnets.0.id }}"
      routes:
        - dest: 10.0.0.0/16
          vpc_peering_connection_id: "{{ vpc_peer.peering_id }}"
        - dest: 0.0.0.0/0
          gateway_id: "{{ public_vpc.igw_id }}"
    register: public_route_table

  - name: Debug public subnet route structure
    debug: var=public_route_table
    when: debug_print == true